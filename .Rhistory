set_no<- 11
setQC_dir <- paste0("/projects/ps-epigen/outputs/setQCs/Set_",set_no)
libs_no <- c(117,118,119)
libs <- sapply(libs_no, function(x) paste0("JYH_",x) )# will replaced by inputs ; ,"_2" for second run
libs
no_libs <- length(libs)
source('./libs.R') # libQC_dir environment
sample_table<- getSampleTable(libs)
tss_plots <- getherTSSplot(libs,trim = didTrim)
set_no<-11
setQC_dir <- paste0("~/mnt/tscc_home/data/outputs/setQCs/Set_",set_no)
setQC_dir
libs_no = 117:119
libs <- sapply(libs_no, function(x) paste0("JYH_",x) )# will replaced by inputs ; ,"_2" for second run
libs
no_libs <- length(libs)
libQC_dir <- "~/mnt/tscc_home/data/outputs/libQCs/" #testing
libs
parseFastqScreen(paste0(libs,"_R1_screen.txt"))
parseFastqScreen<- function(fn="JYH_109_R1_screen.txt"){
pd <- read.delim(fn,skip = 1,check.names=F,stringsAsFactors = F)
pd <- pd[,c(1,grep("\\%",colnames(pd)))]
pd <- pd[,-2] # drop unmapped
um <- as.numeric(unlist(strsplit(pd$Genome[7],split = ":"))[2])
pd$Genome[7] <- "No hits"; pd$`%One_hit_one_genome`[7] <- um
pd[is.na(pd)] <- 0
#pd$`%total_alignment` <- apply(pd[,2:ncol(pd)],1,sum)
pd %>% gather("type","Percentage_Aligned",-1) %>% mutate(sample=sub("_screen.txt","",fn))
#pd %>% mutate(sample=sub("_screen.txt","",fn))
}
parseFastqScreen(paste0(libs,"_R1_screen.txt"))
parseFastqScreen(paste0(fn=libs[1],"_R1_screen.txt"))
parseFastqScreen(fn=paste0(libs[1],"_R1_screen.txt"))
parseFastqScreen(fn=paste0(libs[1],"_R1_screen.txt"))
parseFastqScreen(fn=paste0(libQC_dir,libs[1],"_R1_screen.txt"))
parseFastqScreen(fn=paste0(libQC_dir,libs[1],"/",libs[1],"_R1_screen.txt"))
require(tidyverse)
require(RColorBrewer)
parseFastqScreen(fn=paste0(libQC_dir,libs[1],"/",libs[1],"_R1_screen.txt"))
parseFastqScreen<- function(fn="JYH_109_R1_screen.txt"){
pd <- read.delim(paste0(libQC_dir,libs[1],"/",fn),skip = 1,check.names=F,stringsAsFactors = F)
pd <- pd[,c(1,grep("\\%",colnames(pd)))]
pd <- pd[,-2] # drop unmapped
um <- as.numeric(unlist(strsplit(pd$Genome[7],split = ":"))[2])
pd$Genome[7] <- "No hits"; pd$`%One_hit_one_genome`[7] <- um
pd[is.na(pd)] <- 0
#pd$`%total_alignment` <- apply(pd[,2:ncol(pd)],1,sum)
pd %>% gather("type","Percentage_Aligned",-1) %>% mutate(sample=sub("_screen.txt","",fn))
#pd %>% mutate(sample=sub("_screen.txt","",fn))
}
parseFastqScreen(fn=paste0(libs[1],"_R1_screen.txt"))
rbind(parseFastqScreen(fn=paste0(libs[1],"_R1_screen.txt")),parseFastqScreen(fn=paste0(libs[1],"_R2_screen.txt")))
parseFastqScreen.2 <- function(lib)
rbind(parseFastqScreen(fn=paste0(libs,"_R1_screen.txt")),
parseFastqScreen(fn=paste0(libs,"_R2_screen.txt")))
pd <- do.call(rbind,lapply(libs, parseFastqScreen.2))
parseFastqScreen_perLib <- function(lib)
rbind(parseFastqScreen(fn=paste0(lib,"_R1_screen.txt")),
parseFastqScreen(fn=paste0(lib,"_R2_screen.txt")))
pd <- do.call(rbind,lapply(libs, parseFastqScreen_perLib))
sub("_R[1-2]_screen.txt","",fn)
sub("_R[1-2]_screen.txt","","JYH_109_R1_screen.txt")
parseFastqScreen<- function(fn="JYH_109_R1_screen.txt"){
pd <- read.delim(paste0(libQC_dir,sub("_R[1-2]_screen.txt","","JYH_109_R1_screen.txt"),"/",fn),
skip = 1,check.names=F,stringsAsFactors = F)
pd <- pd[,c(1,grep("\\%",colnames(pd)))]
pd <- pd[,-2] # drop unmapped
um <- as.numeric(unlist(strsplit(pd$Genome[7],split = ":"))[2])
pd$Genome[7] <- "No hits"; pd$`%One_hit_one_genome`[7] <- um
pd[is.na(pd)] <- 0
#pd$`%total_alignment` <- apply(pd[,2:ncol(pd)],1,sum)
pd %>% gather("type","Percentage_Aligned",-1) %>% mutate(sample=sub("_screen.txt","",fn))
#pd %>% mutate(sample=sub("_screen.txt","",fn))
}
parseFastqScreen_perLib <- function(lib)
rbind(parseFastqScreen(fn=paste0(lib,"_R1_screen.txt")),
parseFastqScreen(fn=paste0(lib,"_R2_screen.txt")))
pd <- do.call(rbind,lapply(libs, parseFastqScreen_perLib))
parseFastqScreen<- function(fn="JYH_109_R1_screen.txt"){
pd <- read.delim(paste0(libQC_dir,sub("_R[1-2]_screen.txt","",fn),"/",fn),
skip = 1,check.names=F,stringsAsFactors = F)
pd <- pd[,c(1,grep("\\%",colnames(pd)))]
pd <- pd[,-2] # drop unmapped
um <- as.numeric(unlist(strsplit(pd$Genome[7],split = ":"))[2])
pd$Genome[7] <- "No hits"; pd$`%One_hit_one_genome`[7] <- um
pd[is.na(pd)] <- 0
#pd$`%total_alignment` <- apply(pd[,2:ncol(pd)],1,sum)
pd %>% gather("type","Percentage_Aligned",-1) %>% mutate(sample=sub("_screen.txt","",fn))
#pd %>% mutate(sample=sub("_screen.txt","",fn))
}
pd <- do.call(rbind,lapply(libs, parseFastqScreen_perLib))
dim(pd)
dim(pd)
string(pd)
str(pd)
pd.new <-pd %>% group_by(name=type,
stack=sample)%>% do(data = .$Percentage_Aligned,
categories= .$Genome)
pd.new
nrow(pd.new)
pd.new$color = rep(brewer.pal(4,"Set3"),each=nrow(pd.new)/4)
pd.new$linkedTo = rep(":previous",nrow(pd.new))
pd.new.list <- list_parse(pd.new)
require(highcharter)
pd.new.list <- list_parse(pd.new)
seq(1,nrow(pd.new),length.out = 4)
nrow(pd.new),by = nrow(pd.new)/4)
seq(1,nrow(pd.new),by = nrow(pd.new)/4)
for(i in seq(1,nrow(pd.new),by = nrow(pd.new)/4)) pd.new.list[[i]]$linkedTo =NULL
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories= pd.new$categories[[1]]
)%>%
hc_yAxis(title = list(text = "Percentage Aligned"),
min=0,
max=100) %>%
hc_plotOptions(column = list(
dataLabels = list(enabled = FALSE),
groupPadding = .02,
pointPadding = 0,
stacking = "normal")
) %>%
hc_add_series_list(pd.new.list) %>%
hc_tooltip(formatter=JS("function (){
return '<b>' + this.series.stackKey.replace('column','') + ' - ' + this.x + '</b><br/>' + \n\
this.series.name + ': ' + this.y + '%<br/>' + \n\
'Total Alignment: ' + this.point.stackTotal + '%';}"))
plotSource <- function(pd){
pd.new <-pd %>% group_by(name=type,
stack=sample)%>% do(data = .$Percentage_Aligned,
categories= .$Genome)
pd.new$color = rep(brewer.pal(4,"Set3"),each=nrow(pd.new)/4)
pd.new$linkedTo = rep(":previous",nrow(pd.new))
pd.new.list <- list_parse(pd.new)
for(i in seq(1,nrow(pd.new),by = nrow(pd.new)/4)) pd.new.list[[i]]$linkedTo =NULL
# ref = https://stackoverflow.com/questions/38093229/multiple-series-in-highcharter-r-stacked-barchart
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories= pd.new$categories[[1]]
)%>%
hc_yAxis(title = list(text = "Percentage Aligned"),
min=0,
max=100) %>%
hc_plotOptions(column = list(
dataLabels = list(enabled = FALSE),
groupPadding = .02,
pointPadding = 0,
stacking = "normal")
) %>%
hc_add_series_list(pd.new.list) %>%
hc_tooltip(formatter=JS("function (){
return '<b>' + this.series.stackKey.replace('column','') + ' - ' + this.x + '</b><br/>' + \n\
this.series.name + ': ' + this.y + '%<br/>' + \n\
'Total Alignment: ' + this.point.stackTotal + '%';}"))
# ref: https://github.com/jbkunst/highcharter/issues/54
# ref: https://github.com/ewels/MultiQC/blob/master/multiqc/modules/fastq_screen/fastq_screen.py
}
plotSource <- function(pd=do.call(rbind,lapply(libs, parseFastqScreen_perLib))){
pd.new <-pd %>% group_by(name=type,
stack=sample)%>% do(data = .$Percentage_Aligned,
categories= .$Genome)
pd.new$color = rep(brewer.pal(4,"Set3"),each=nrow(pd.new)/4)
pd.new$linkedTo = rep(":previous",nrow(pd.new))
pd.new.list <- list_parse(pd.new)
for(i in seq(1,nrow(pd.new),by = nrow(pd.new)/4)) pd.new.list[[i]]$linkedTo =NULL
# ref = https://stackoverflow.com/questions/38093229/multiple-series-in-highcharter-r-stacked-barchart
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories= pd.new$categories[[1]]
)%>%
hc_yAxis(title = list(text = "Percentage Aligned"),
min=0,
max=100) %>%
hc_plotOptions(column = list(
dataLabels = list(enabled = FALSE),
groupPadding = .02,
pointPadding = 0,
stacking = "normal")
) %>%
hc_add_series_list(pd.new.list) %>%
hc_tooltip(formatter=JS("function (){
return '<b>' + this.series.stackKey.replace('column','') + ' - ' + this.x + '</b><br/>' + \n\
this.series.name + ': ' + this.y + '%<br/>' + \n\
'Total Alignment: ' + this.point.stackTotal + '%';}"))
# ref: https://github.com/jbkunst/highcharter/issues/54
# ref: https://github.com/ewels/MultiQC/blob/master/multiqc/modules/fastq_screen/fastq_screen.py
}
parseFastqScreen()
plotSource()
require(googlesheets)
suppressPackageStartupMessages(require(dplyr))
gs_auth(token="~/mnt/tscc_home/software/google/googlesheets_token.rds")
gs_ls() # for the auth
gs_ls()[6,]
gs_mseqts <- gs_key("1ZD223K4A7SJ0_uw4OvhUOm9BecqDAposRflE9i1Ocms")
gs_mseqts
?cell_limits
sample_table <- gs_mseqts%>% gs_read(range=cell_limits(c(2,1),c(NA,7)))
sample_table <- gs_mseqts%>% gs_read(range=cell_limits(c(1,1),c(NA,7)))
sample_table$version
date()
set_no
??googlesheet
??googlesheets
?gs_edit_cells
sample_table$Updated <- data()
sample_table$Updated
sample_table$Updated <- date()
sample_table$Updated
gs_mseqts %>% gs_edit_cells(input=sample_table$Updated,  anchor="F2")
gs_mseqts<- gs_mseqts %>% gs_edit_cells(input=sample_table$Updated,  anchor="F2")
sample_table
which(sample_table$`Set QC index`==paste0("Set_",set_no)
)
gs_mseqts <- gs_key("1ZD223K4A7SJ0_uw4OvhUOm9BecqDAposRflE9i1Ocms")
rid <- which(sample_table$`Set QC index`==paste0("Set_",set_no))
sample_table$Updated[rid] <- date()
sample_table
sample_table$Updated
rid
gs_mseqts <- gs_key("1ZD223K4A7SJ0_uw4OvhUOm9BecqDAposRflE9i1Ocms")
sample_table <- gs_mseqts%>% gs_read(range=cell_limits(c(1,1),c(NA,7)))
rid <- which(sample_table$`Set QC index`==paste0("Set_",set_no))
sample_table$Updated[rid] <- date()
sample_table$Updated
gs_mseqts<- gs_mseqts %>% gs_edit_cells(input=sample_table$Updated,  anchor="F2")
sample_table
sample_table$version
sample_table$version[rid]
system("git rev-parse --short HEAD", intern = TRUE)
sample_table$version[rid] <- system("git rev-parse --short HEAD", intern = TRUE)
gs_mseqts<- gs_mseqts %>% gs_edit_cells(input=sample_table$Updated,  anchor="G2")
gs_mseqts<- gs_mseqts %>% gs_edit_cells(input=sample_table$version,  anchor="G2")
